10.2.	异常定义
根据目前框架设计的异常处理形式，结合我们的安全应用目前自身特点，将应用内部异常定义为两大类：
	应用内部出现的运行时和非运行时异常
根据每个业务针对异常的处理方案和时机的不同，该类型异常又可以分为两种：程序本身可以内部消化处理的异常（如：在某些场景下 FileNotFoundException可以通过创建新的文件或者忽略的形式来处理消化）；内部无法消化，需要向上抛出让上层进行延迟处理的异常（如：发生了DBException这样的异常，程序如果不能内部消化，需要上抛到最上面的界面调用层，调用层可能会进行错误提示处理）。
	程序执行过程中出现的业务相关和硬件相关错误信息
该类型的错误主要包含在程序执行的过程中出现的业务错误（如服务端返回的错误信息）和硬件未达到相关状态出现的错误（如：网络为开启、安全卡未插入等）。在本框架中将这些“正常的错误”也以JAVA异常的形式向调用方进行暴露，这些异常出现后往往需要进行延迟处理（上层处理）并且需要用户的参与。
10.3.	约束和原则
在本框架中针对异常的定义和处理需要遵循以下原则和约束条件：
	所有接口的定义中必须包含该接口可能出现的所有异常情况，以及能够表明该异常详细信息的元素（如：错误码、异常描述信息等），参看接口定义规范；
	接口调用方必须对接口可能出现的所有异常进行处理。此处需要注意是，
在将异常跑向调用方的过程中，我们往往会对原始的异常信息进行更高一个级别异常转化（即异常链处理），在构建错误异常链的过程中，高级别的异常对象中必须包含该异常出现的原始信息和堆栈信息，如卡操作异常CardException，调用方在拿到该异常对象的时候，该对象中必须包含卡操作失败的具体原因（如：证书未找到、密钥丢失等原始的信息）。
	对于程序内部能够消化处理的异常，应尽早进行处理，能处理的异常尽量不要往上层抛出；
	需要上层进行延迟处理的异常，尽量不要在下层进行异常的捕获处理，这样往往会造成更严重的异常出现。
10.4.	常见异常分类
根据本框架中对异常的定义和对异常处理的约束原则，将需要延迟处理（调用方处理）的异常划分为以下几大类（可扩展和完善）：

注：
	此处定义的几类异常都是需要上层调用方进行解析和处理的异常，内部可以消化处理的异常不在此定义范围内。
